!function(){"use strict";var s=s||{};s.log=function(s){console.log(s)},s.Composer=function(t,e){this.width=1,this.height=1,this.settings=e||{},this.useRGBA=this.settings.useRGBA||!1,this.vertexShadersPath=this.settings.vertexShadersPath||"vertex-shaders",this.fragmentShadersPath=this.settings.fragmentShadersPath||"vertex-shaders",this.renderer=t,this.copyPass=new s.CopyPass,this.scene=new THREE.Scene,this.quad=new THREE.Mesh(new THREE.PlaneGeometry(1,1),this.defaultMaterial),this.scene.add(this.quad),this.camera=new THREE.OrthographicCamera(1,1,1,1,-1e4,1e4),this.front=new THREE.WebGLRenderTarget(1,1,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:this.useRGBA?THREE.RGBAFormat:THREE.RGBFormat}),this.back=this.front.clone(),this.startTime=Date.now(),this.passes={}},s.Composer.prototype.linkPass=function(s,t){function e(){this.message='Pass "'+s+'" already loaded.',this.name="WagnerLoadPassException",this.toString=function(){return this.message}}if(this.passes[s])throw new e(s,t);this.passes[s]=t},s.Composer.prototype.swapBuffers=function(){this.output=this.write,this.input=this.read;var s=this.write;this.write=this.read,this.read=s},s.Composer.prototype.render=function(s,t,e){this.copyPass.isLoaded()&&(e&&this.swapBuffers(),this.renderer.render(s,t,this.write,!0),this.swapBuffers())},s.Composer.prototype.toScreen=function(){this.copyPass.isLoaded()&&(this.quad.material=this.copyPass.shader,this.quad.material.uniforms.tDiffuse.value=this.read,this.quad.material.uniforms.resolution.value.set(this.width,this.height),this.renderer.render(this.scene,this.camera))},s.Composer.prototype.toTexture=function(s){this.copyPass.isLoaded()&&(this.quad.material=this.copyPass.shader,this.quad.material.uniforms.tDiffuse.value=this.read,this.renderer.render(this.scene,this.camera,s,!0))},s.Composer.prototype.pass=function(t,e){if("string"==typeof t&&(this.quad.material=this.passes[t]),t instanceof THREE.ShaderMaterial&&(this.quad.material=t),t instanceof s.Pass){if(!t.isLoaded())return;return t.run(this),void 0}this.quad.material.uniforms.tDiffuse.value=this.read;for(var a in e)this.quad.material.uniforms[a].value=e[a];this.quad.material.uniforms.resolution.value.set(this.width,this.height),this.quad.material.uniforms.time.value=.001*(Date.now()-this.startTime),this.renderer.render(this.scene,this.camera,this.write,!1),this.swapBuffers()},s.Composer.prototype.reset=function(){this.read=this.front,this.write=this.back,this.output=this.write,this.input=this.read},s.Composer.prototype.setSource=function(s){this.copyPass.isLoaded()&&(this.quad.material=this.copyPass.shader,this.quad.material.uniforms.tDiffuse.value=s,this.renderer.render(this.scene,this.camera,this.write,!0),this.swapBuffers())},s.Composer.prototype.setSize=function(t,e){this.width=t,this.height=e,this.camera.projectionMatrix.makeOrthographic(t/-2,t/2,e/2,e/-2,this.camera.near,this.camera.far),this.quad.scale.set(t,e,1);var a=this.front.clone();a.width=t,a.height=e,this.quad.material instanceof s.Pass&&(this.quad.material.uniforms.tDiffuse.value=a),this.front=a;var a=this.back.clone();a.width=t,a.height=e,this.back=a},s.Composer.prototype.defaultMaterial=new THREE.MeshBasicMaterial,s.loadShader=function(s,t){var e;e=-1!=s.indexOf("-vs.glsl")?"vertex-shaders/":"fragment-shaders/";var a=new XMLHttpRequest;a.onload=function(){var s=a.responseText;t(s)}.bind(this),a.open("get",e+s,!0),a.send()},s.processShader=function(t,e){for(var a,o=/uniform\s+([^\s]+)\s+([^\s]+)\s*;/gi,r=/uniform\s+([^\s]+)\s+([^\s]+)\s*\[\s*(\w+)\s*\]*\s*;/gi,i={sampler2D:{type:"t",value:function(){return new THREE.Texture}},samplerCube:{type:"t",value:function(){}},bool:{type:"b",value:function(){return 0}},"int":{type:"i",value:function(){return 0}},"float":{type:"f",value:function(){return 0}},vec2:{type:"v2",value:function(){return new THREE.Vector2}},vec3:{type:"v3",value:function(){return new THREE.Vector3}},vec4:{type:"v4",value:function(){return new THREE.Vector4}},bvec2:{type:"v2",value:function(){return new THREE.Vector2}},bvec3:{type:"v3",value:function(){return new THREE.Vector3}},bvec4:{type:"v4",value:function(){return new THREE.Vector4}},ivec2:{type:"v2",value:function(){return new THREE.Vector2}},ivec3:{type:"v3",value:function(){return new THREE.Vector3}},ivec4:{type:"v4",value:function(){return new THREE.Vector4}},mat2:{type:"v2",value:function(){return new THREE.Matrix2}},mat3:{type:"v3",value:function(){return new THREE.Matrix3}},mat4:{type:"v4",value:function(){return new THREE.Matrix4}}},n={vec3:{type:"v3v",value:function(){return[]}}},l={resolution:{type:"v2",value:new THREE.Vector2(1,1),"default":!0},time:{type:"f",value:Date.now(),"default":!0},tDiffuse:{type:"t",value:new THREE.Texture,"default":!0}};null!=(a=o.exec(e));){a.index===o.lastIndex&&o.lastIndex++;var u=a[1],h=a[2];s.log("  > SINGLE",u,h),l[h]={type:i[u].type,value:i[u].value()}}for(;null!=(a=r.exec(e));){a.index===o.lastIndex&&o.lastIndex++;var u=a[1],h=a[2],d=a[3];s.log("  > ARRAY",d,u,h),l[h]={type:n[u].type,value:n[u].value()}}var c=new THREE.ShaderMaterial({uniforms:l,vertexShader:t,fragmentShader:e,shading:THREE.FlatShading,depthWrite:!1,depthTest:!1,transparent:!0});return c},s.Pass=function(){s.log("Pass constructor"),this.shader=null,this.loaded=null,this.params={}},s.Pass.prototype.loadShader=function(t,e){var a=this;s.loadShader("orto-vs.glsl",function(o){s.loadShader(t,function(t){a.shader=s.processShader(o,t),e&&e.apply(a)})})},s.Pass.prototype.mapUniforms=function(s){var t=this.params;for(var e in s)s[e].default||!function(e){Object.defineProperty(t,e,{get:function(){return s[e].value},set:function(t){s[e].value=t},configurable:!1})}(e)},s.Pass.prototype.run=function(s){s.pass(this.shader)},s.Pass.prototype.isLoaded=function(){return null!==this.loaded?this.loaded:(this.shader instanceof THREE.ShaderMaterial&&(this.loaded=!0),void 0)},s.Pass.prototype.getOfflineTexture=function(s,t,e){var a=new THREE.WebGLRenderTarget(s,t,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:e?THREE.RGBAFormat:THREE.RGBFormat});return a},s.CopyPass=function(){s.Pass.call(this),s.log("CopyPass constructor"),this.loadShader("copy-fs.glsl")},s.CopyPass.prototype=new s.Pass,s.BlendPass=function(){s.Pass.call(this),s.log("BlendPass constructor"),this.loadShader("blend-fs.glsl",function(){this.shader.uniforms.mode.value=1})},s.BlendMode={Normal:1,Dissolve:2,Darken:3,Multiply:4,ColorBurn:5,LinearBurn:6,DarkerColor:7,Lighten:8,Screen:9,ColorDodge:10,LinearDodge:11,LighterColor:12,Overlay:13,SoftLight:14,HardLight:15,VividLight:16,LinearLight:17,PinLight:18,HardMix:19,Difference:20,Exclusion:21,Substract:22,Divide:23},s.BlendPass.prototype=new s.Pass,s.InvertPass=function(){s.Pass.call(this),s.log("InvertPass constructor"),this.loadShader("invert-fs.glsl")},s.InvertPass.prototype=new s.Pass,s.SepiaPass=function(){s.Pass.call(this),s.log("SepiaPass constructor"),this.loadShader("sepia-fs.glsl")},s.SepiaPass.prototype=new s.Pass,s.Pass.prototype.bindUniform=function(s,t,e,a){Object.defineProperty(s,e,{get:function(){return t.uniforms[id].value},set:a,configurable:!1})},s.NoisePass=function(){s.Pass.call(this),s.log("Noise Pass constructor"),this.loadShader("noise-fs.glsl"),this.params.noiseAmount=.1},s.NoisePass.prototype=new s.Pass,s.NoisePass.prototype.run=function(s){this.shader.uniforms.amount.value=this.params.noiseAmount,s.pass(this.shader)},s.VignettePass=function(){s.Pass.call(this),s.log("Vignette Pass constructor"),this.loadShader("vignette-fs.glsl"),this.params.amount=1,this.params.size=.1},s.VignettePass.prototype=new s.Pass,s.VignettePass.prototype.run=function(s){this.shader.uniforms.amount.value=this.params.amount,this.shader.uniforms.size.value=this.params.size,s.pass(this.shader)},s.Vignette2Pass=function(){s.Pass.call(this),s.log("Vignette Pass constructor"),this.loadShader("vignette2-fs.glsl")},s.Vignette2Pass.prototype=new s.Pass,s.DenoisePass=function(){s.Pass.call(this),s.log("Denoise Pass constructor"),this.loadShader("denoise-fs.glsl"),this.params.exponent=5,this.params.strength=10},s.DenoisePass.prototype=new s.Pass,s.DenoisePass.prototype.run=function(s){this.shader.uniforms.exponent.value=this.params.exponent,this.shader.uniforms.strength.value=this.params.strength,s.pass(this.shader)},s.BoxBlurPass=function(){s.Pass.call(this),s.log("BoxBlurPass Pass constructor"),this.loadShader("box-blur-fs.glsl")},s.BoxBlurPass.prototype=new s.Pass,s.FullBoxBlurPass=function(){s.Pass.call(this),s.log("FullBoxBlurPass Pass constructor"),this.boxPass=new s.BoxBlurPass},s.FullBoxBlurPass.prototype=new s.Pass,s.FullBoxBlurPass.prototype.isLoaded=function(){return this.boxPass.isLoaded()&&(this.loaded=!0),s.Pass.prototype.isLoaded.call(this)},s.FullBoxBlurPass.prototype.run=function(s){var t=20;this.boxPass.shader.uniforms.delta.value.set(t/s.width,0),s.pass(this.boxPass.shader),this.boxPass.shader.uniforms.delta.value.set(0,t/s.height),s.pass(this.boxPass.shader)},s.ZoomBlurPass=function(){s.Pass.call(this),s.log("ZoomBlurPass Pass constructor"),this.loadShader("zoom-blur-fs.glsl"),this.params.center=new THREE.Vector2(.5,.5),this.params.strength=2},s.ZoomBlurPass.prototype=new s.Pass,s.ZoomBlurPass.prototype.run=function(s){this.shader.uniforms.center.value.copy(this.params.center),this.shader.uniforms.strength.value=this.params.strength,s.pass(this.shader)},s.MultiPassBloomPass=function(){s.Pass.call(this),s.log("MultiPassBloomPass Pass constructor"),this.composer=null;this.tmpTexture=this.getOfflineTexture(512,512),this.boxPass=new s.BoxBlurPass,this.blendPass=new s.BlendPass,this.zoomBlur=new s.ZoomBlurPass,this.params.blurAmount=20,this.params.applyZoomBlur=!1},s.MultiPassBloomPass.prototype=new s.Pass,s.MultiPassBloomPass.prototype.isLoaded=function(){return this.boxPass.isLoaded()&&this.blendPass.isLoaded()&&this.zoomBlur.isLoaded()&&(this.loaded=!0),s.Pass.prototype.isLoaded.call(this)},s.MultiPassBloomPass.prototype.run=function(t){this.composer||(this.composer=new s.Composer(t.renderer,{useRGBA:!0}),this.composer.setSize(this.tmpTexture.width,this.tmpTexture.height)),this.composer.reset(),this.composer.setSource(t.output),this.boxPass.shader.uniforms.delta.value.set(this.params.blurAmount/this.composer.width,0),this.composer.pass(this.boxPass.shader),this.boxPass.shader.uniforms.delta.value.set(0,this.params.blurAmount/this.composer.height),this.composer.pass(this.boxPass.shader),this.params.applyZoomBlur&&this.composer.pass(this.zoomBlur),this.blendPass.shader.uniforms.mode.value=s.BlendMode.Screen,this.blendPass.shader.uniforms.tDiffuse2.value=this.composer.output,t.pass(this.blendPass.shader)},s.CGAPass=function(){s.Pass.call(this),s.log("CGA Pass constructor"),this.loadShader("cga-fs.glsl",function(){this.shader.uniforms.pixelDensity.value=window.devicePixelRatio})},s.CGAPass.prototype=new s.Pass,s.SobelEdgeDetectionPass=function(){s.Pass.call(this),s.log("SobelEdgeDetectionPass Pass constructor"),this.loadShader("sobel-fs.glsl")},s.SobelEdgeDetectionPass.prototype=new s.Pass,s.FreiChenEdgeDetectionPass=function(){s.Pass.call(this),s.log("FreiChenEdgeDetectionPass Pass constructor"),this.loadShader("frei-chen-fs.glsl")},s.FreiChenEdgeDetectionPass.prototype=new s.Pass,s.DirtPass=function(){this.blendPass=new s.BlendPass,this.dirtTexture=THREE.ImageUtils.loadTexture("assets/textures/dirt8.jpg")},s.DirtPass.prototype=new s.Pass,s.DirtPass.prototype.isLoaded=function(){return this.blendPass.isLoaded()&&(this.loaded=!0),s.Pass.prototype.isLoaded.call(this)},s.DirtPass.prototype.run=function(t){this.blendPass.shader.uniforms.sizeMode.value=1,this.blendPass.shader.uniforms.mode.value=s.BlendMode.SoftLight,this.blendPass.shader.uniforms.tDiffuse2.value=this.dirtTexture,this.blendPass.shader.uniforms.resolution2.value.set(this.dirtTexture.image.width,this.dirtTexture.image.height),this.blendPass.shader.uniforms.aspectRatio.value=t.read.width/t.read.height,this.blendPass.shader.uniforms.aspectRatio2.value=this.dirtTexture.image.width/this.dirtTexture.image.height,t.pass(this.blendPass.shader)},s.GuidedBoxBlurPass=function(){s.Pass.call(this),s.log("GuidedBoxBlurPass Pass constructor"),this.loadShader("guided-box-blur-fs.glsl")},s.GuidedBoxBlurPass.prototype=new s.Pass,s.GuidedFullBoxBlurPass=function(){s.Pass.call(this),s.log("FullBoxBlurPass Pass constructor"),this.guidedBoxPass=new s.GuidedBoxBlurPass},s.GuidedFullBoxBlurPass.prototype=new s.Pass,s.GuidedFullBoxBlurPass.prototype.isLoaded=function(){return this.guidedBoxPass.isLoaded()&&(this.loaded=!0),s.Pass.prototype.isLoaded.call(this)},s.GuidedFullBoxBlurPass.prototype.run=function(s){var t=10;this.guidedBoxPass.shader.uniforms.invertBiasMap.value=0,this.guidedBoxPass.shader.uniforms.delta.value.set(t/s.width,0),s.pass(this.guidedBoxPass.shader),this.guidedBoxPass.shader.uniforms.delta.value.set(0,t/s.height),s.pass(this.guidedBoxPass.shader)},s.PixelatePass=function(){s.Pass.call(this),s.log("PixelatePass Pass constructor"),this.loadShader("pixelate-fs.glsl",function(){this.shader.uniforms.amount.value=320})},s.PixelatePass.prototype=new s.Pass,s.RGBSplitPass=function(){s.Pass.call(this),s.log("RGBSplitPass Pass constructor"),this.loadShader("rgb-split-fs.glsl",function(){this.shader.uniforms.distance.value.set(10,10)})},s.RGBSplitPass.prototype=new s.Pass,s.ArtPass=function(){s.Pass.call(this),s.log("ArtPass Pass constructor"),this.loadShader("art-fs.glsl")},s.ArtPass.prototype=new s.Pass,s.ChromaticAberrationPass=function(){s.Pass.call(this),s.log("ChromaticAberrationPass Pass constructor"),this.loadShader("chromatic-aberration-fs.glsl")},s.ChromaticAberrationPass.prototype=new s.Pass,s.BarrelBlurPass=function(){s.Pass.call(this),s.log("BarrelBlurPass Pass constructor"),this.loadShader("barrel-blur-fs.glsl")},s.BarrelBlurPass.prototype=new s.Pass,s.OldVideoPass=function(){s.Pass.call(this),s.log("OldVideoPass Pass constructor"),this.loadShader("old-video-fs.glsl")},s.OldVideoPass.prototype=new s.Pass,s.DotScreenPass=function(){s.Pass.call(this),s.log("DotScreenPass Pass constructor"),this.loadShader("dot-screen-fs.glsl")},s.DotScreenPass.prototype=new s.Pass,s.PoissonDiscBlurPass=function(){s.Pass.call(this),s.log("PoissonDiscBlurPass Pass constructor"),this.loadShader("poisson-disc-blur-fs.glsl")},s.PoissonDiscBlurPass.prototype=new s.Pass,s.CircularBlurPass=function(){s.Pass.call(this),s.log("CircularBlurPass Pass constructor"),this.loadShader("circular-blur-fs.glsl")},s.CircularBlurPass.prototype=new s.Pass,s.ToonPass=function(){s.Pass.call(this),s.log("ToonPass Pass constructor"),this.loadShader("toon-fs.glsl")},s.ToonPass.prototype=new s.Pass,window.WAGNER=s}();